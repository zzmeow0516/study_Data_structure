2022/3/25
1.函数的渐进增长：对于f(n) 和 g(n)，若存在某个N，使得当n>N时，恒有f(n)>g(n),我们称f(n)的增长速度>g(n)。
    这个定义跟 极限 的定义十分类似~
    而且判断他的增长速度时，是取决于最高次项的，也类似于两个函数极限无穷小的比较~

2.算法的时间复杂度:T(n)=O(f(n)),f(n)表示代码执行次数，O(n)表示时间/空间复杂度的记法
    2.1推导大O阶的算法：
        2.1.1所有常数写成 1；
        2.1.2如果最高阶不是常数的话，就只保留最高阶那一项；
        2.1.3将最高阶那一项的常数去掉，即得到大 O 阶；
        
    2.2常数阶：T(n)=O(1)
    2.3线性阶:遍历算法，通常T(n)=O(n)
    2.4对数阶:T(n)=O(logn),在这里通常是以2为底的对数，即log2 n~
    2.5平方阶T(n)=O(n^2)
    2.6.....
3.算法的空间复杂度：S(n)=O(f(n)).
    3.1




Q1:对数阶log n 的底数是默认为2吗? log3 n 呢？
